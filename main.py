import sqlalchemy
import pandas as pd 
from sqlalchemy.orm import sessionmaker
import requests
import json
from datetime import datetime
import datetime
import mysql.connector

DATABASE_LOCATION = 'mysql://root:root@localhost/my_played_tracks'
USER_ID=""  #your userid on soptify

#token generated by soptify api

TOKEN="BQBKesX8qCtPIwBHuhtXMZQcrWdCmUIt_NCytNy9wSPHzhkZSST8Qd2DY3IfN1aW33K0upefIqlLMarLcoUIOyD-lCXGyeBJdw4du8rIDHqmDVpPSj3CCFeCNqmIpPl6JG7e7RXe8TUVo1YO8Bjo2IeierJ1ttSG1QK3XdSc"

# header

if __name__ == "__main__":
    headers = {
        "Accept" : "application/json",
        "Content-Type" : "application/json",
        "Authorization" : "Bearer {token}".format(token=TOKEN)
    }

# converting time into miliseconds

today = datetime.datetime.now()
yesterday = today - datetime.timedelta(days=1)
yesterday_unix_timestamp = int(yesterday.timestamp()) * 1000

# request to get json file of songs which you have listened in last 24 hrs

r = requests.get("https://api.spotify.com/v1/me/player/recently-played?after={time}".format(time=yesterday_unix_timestamp), headers = headers)
data=r.json()

#print(data)

song_names=[]
artist_names=[]
played_at_list=[]
timestamps=[]

# Extracting only the relevant bits of data from the json object
for song in data["items"]:
        song_names.append(song["track"]["name"])
        artist_names.append(song["track"]["album"]["artists"][0]["name"])
        played_at_list.append(song["played_at"])
        timestamps.append(song["played_at"][0:10])
song_dict = {
        "song_name" : song_names,
        "artist_name": artist_names,
        "played_at" : played_at_list,
        "timestamp" : timestamps
    }

#print(song_dict)
song_df = pd.DataFrame(song_dict, columns = ["song_name", "artist_name", "played_at", "timestamp"])

# loading data into database
mydb=mysql.connector.connect(host="localhost",user="root",passwd="root",database="my_played_tracks")
mycursor=mydb.cursor()

engine = sqlalchemy.create_engine(DATABASE_LOCATION)

sql_query = """
   CREATE TABLE IF NOT EXISTS my_played_tracks(
        song_name VARCHAR(200),
        artist_name VARCHAR(200),
        played_at VARCHAR(200),
        timestamp VARCHAR(200),
        CONSTRAINT primary_key_constraint PRIMARY KEY (played_at)
   )
   """
mycursor.execute(sql_query)
print("successfully opened the database")

try:
    song_df.to_sql("my_played_tracks", engine, index=False, if_exists='append')
except:
    print("Data already exists in the database")
mydb.close()
print("database closed")




